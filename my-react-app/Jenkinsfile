pipeline {
    agent any

    environment {
        VERCEL_TOKEN = credentials('vercel-token')
        VERCEL_ORG = 'potterpurpps-projects'
        NPM_CONFIG_PREFIX = "${env.WORKSPACE}/.npm-global" // Set custom npm global directory
    }

    stages {
        stage('Prepare Environment') {
            steps {
                // Create custom npm global directory and add it to PATH
                sh '''
                    mkdir -p $NPM_CONFIG_PREFIX
                    export PATH=$NPM_CONFIG_PREFIX/bin:$PATH
                    echo "export PATH=$NPM_CONFIG_PREFIX/bin:$PATH" >> ~/.bashrc
                '''
                // Install vercel globally in the custom directory
                sh 'npm install -g vercel'
            }
        }

        stage('Checkout') {
            steps {
                echo "Hello World!"
                git branch: 'main', url: 'https://github.com/Potterpurpp/potteraomfree.git'
            }
        }
        stage('Install Dependencies') {
            steps {
                dir('my-react-app') {
                    sh 'rm -rf node_modules package-lock.json'
                    sh 'npm install'
                }
            }
        }
        stage('Build') {
            steps {
                dir('my-react-app') {
                    sh 'npm run build'
                }
            }
        }
        stage('Deploy to Vercel') {
            steps {
                dir('my-react-app') {
                    sh "vercel --token $VERCEL_TOKEN --scope $VERCEL_ORG --prod --confirm"
                }
            }
        }
    }

    post {
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}