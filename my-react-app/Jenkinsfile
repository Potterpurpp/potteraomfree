pipeline {
    agent any

    environment {
        VERCEL_TOKEN = credentials('vercel-token')
        VERCEL_ORG = 'potterpurpps-projects'
        DISCORD_WEBHOOK_URL = 'https://discord.com/api/webhooks/1301119066265747517/2YJCuNJJO-JlYJ9fUQK7_c_xTUj-Jasv97RiO7Fyb7Y9qPtEtsxNolQKAE4QKaNEszj1'
        TEAMS_WEBHOOK_URL = 'https://bluebikgroupoutlookcom.webhook.office.com/webhookb2/145186be-7da8-49ca-ae1f-04113cb2f86b@c6f661d6-c0e6-4a9b-beee-5dda4af7788b/IncomingWebhook/b2c70ed0cf10420d9443e8055e9ef101/b90aed23-9e60-4dd0-8400-4a9574103f9a/V2IcFDTMgzoWlVX6CHTFhp9QyRSAf_FDo4t7s6EkCra1E1'
        TEAMS_WEBHOOK_URL2 ='https://bluebikgroupoutlookcom.webhook.office.com/webhookb2/145186be-7da8-49ca-ae1f-04113cb2f86b@c6f661d6-c0e6-4a9b-beee-5dda4af7788b/JenkinsCI/f253091002b4418b8f37bc47c4d65671/b90aed23-9e60-4dd0-8400-4a9574103f9a/V2CHJv_s9jpSD0NXTcZ1H2WVkS-vrX08FvaoRGEfAtY6I1'
    }
    stages {
        stage('Checkout') {
            steps {
                echo "Hello World!"
                git branch: 'main', url: 'https://github.com/Potterpurpp/potteraomfree.git' 
            }
        }
        stage('Install Dependencies') {
            steps {
                dir('my-react-app') {
                    sh 'rm -rf node_modules package-lock.json'
                    sh 'npm install'
                }
            }
        }
        stage('Build') {
            steps {
                dir('my-react-app') {
                    sh 'npm run build'
                }
            }
        }
        stage('Deploy to Vercel') {
            steps {
                dir('my-react-app') {
                    // Use npx to run the Vercel CLI
                    sh 'npx vercel --token $VERCEL_TOKEN --scope $VERCEL_ORG --prod --confirm'
                }
            }
        }
         stage('Notify Discord') {
            steps {
                script {
                    def message = "Deployment to Vercel successful: ${env.BUILD_URL}"
                    sh """
                    curl -H "Content-Type: application/json" -d '{
                        "content": "${message}"
                    }' ${DISCORD_WEBHOOK_URL}
                    """
                }
            }
        }
    }

    post {
        always {
            // Notify Build Start
            office365ConnectorSend (
                webhookUrl: TEAMS_WEBHOOK_URL2,
                color: '#00ADEF', // Blue for build start
                message: "<b style='font-size:16px;'>üöÄ Build Started</b>\nPipeline build #${env.BUILD_NUMBER} has started.",
                status: "Started",
                adaptiveCards: true
            )
        }

        aborted {
            // Notify Aborted
            office365ConnectorSend (
                webhookUrl: TEAMS_WEBHOOK_URL2,
                color: '#FFA500', // Orange for aborted
                message: "<b style='font-size:16px;'>‚õî Build Aborted</b>\nPipeline build #${env.BUILD_NUMBER} was aborted.",
                status: "Aborted",
                adaptiveCards: true
            )
        }

        failure {
            office365ConnectorSend (
                webhookUrl: TEAMS_WEBHOOK_URL,
                message: 'Something went wrong', 
                status: 'Failure',
                adaptiveCards: true
            )
        }

        notBuilt {
            // Notify Not Built
            office365ConnectorSend (
                webhookUrl: TEAMS_WEBHOOK_URL,
                color: '#808080', // Gray for not built
                message: """
                                **automated-pipeline: Build #${env.BUILD_NUMBER} Not Built**
                                **Notification from automated-pipeline: Not Built**
                                **Latest status of build #${env.BUILD_NUMBER}**
                                **Status:** Not Built
                                **Remarks:** Started by user ${currentBuild.getBuildCauses()[0]?.userId}
                                **Committers:** YOUR_COMMITTER_NAME
                                **image:** ![Not Built](URL_TO_YOUR_NOT_BUILT_IMAGE)
                            """,
                status: "Not Built",
                adaptiveCards: true

            )
        }

        success {
            // Notify Success and Back to Normal
            office365ConnectorSend (
                webhookUrl: TEAMS_WEBHOOK_URL2,
                color: '#00FF00', // Green for success
                message: '<b style="font-size:16px;">Pipeline succeeded for build #${env.BUILD_NUMBER} is successfully built',
                status: "Success",
                adaptiveCards: true
            )
        }

        unstable {
            // Notify Unstable
            office365ConnectorSend (
                webhookUrl: TEAMS_WEBHOOK_URL,
                color: '#FFFF00', // Yellow for unstable
                message: "<b style='font-size:16px;'>‚ö†Ô∏è Build Unstable</b>\nPipeline build #${env.BUILD_NUMBER} is unstable.",
                status: "Unstable",
                adaptiveCards: true
            )
        }

        cleanup {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                            [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }
} 
